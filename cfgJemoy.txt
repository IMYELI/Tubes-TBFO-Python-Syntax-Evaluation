S -> ACTION
ACTION -> VAR = V ACTION | VAR = TUPLE ACTION | VAR + = V ACTION | VAR - = V ACTION | VAR * = V ACTION | VAR / = V ACTION | VAR % = V ACTION | DEF ACTION | WHILE_LOOP ACTION | FOR_LOOP ACTION | RAISE ACTION | COMMENT ACTION | PRINT ACTION | CLASS ACTION | IF_CONDITION ACTION | METHOD ACTION | FUNCTION ACTION | WITH ACTION | IMPORT ACTION | PASS ACTION | ACTION VAR = V | ACTION VAR = TUPLE | ACTION VAR + = V | ACTION VAR - = V | ACTION VAR * = V | ACTION VAR / = V | ACTION VAR % = V | ACTION DEF | ACTION WHILE_LOOP | ACTION FOR_LOOP | ACTION RAISE | ACTION COMMENT | ACTION PRINT | ACTION CLASS | ACTION IF_CONDITION | ACTION METHOD | ACTION FUNCTION | ACTION WITH | ACTION IMPORT | ACTION PASS | VAR = V | VAR = TUPLE | VAR + = V | VAR - = V | VAR * = V | VAR / = V | VAR % = V | DEF | WHILE_LOOP | FOR_LOOP | RAISE | COMMENT | PRINT | CLASS | IF_CONDITION | METHOD | FUNCTION | WITH | IMPORT | PASS
LOOP_ACTION -> LOOP_ACTION LOOP_ACTION | ACTION | break | continue | COMMENT

IF_CONDITION -> if BRACKETS : ACTION | if BRACKETS : ACTION ELIF_CONDITION | if V : ACTION | if V : ACTION ELIF_CONDITION
ELIF_CONDITION -> elif BRACKETS : ACTION ELIF_CONDITION | else : | elif BRACKETS :


WHILE_LOOP -> while ( True ) : LOOP_ACTION |  while ( False ) : LOOP_ACTION | while ( V ) : LOOP_ACTION
BOOL_LOOP -> VAR | True | False | VAR COMPARE VAR
FOR_LOOP -> for VAR in ITERABLE : LOOP_ACTION | for VAR in range ( INPUT_RANGE ) :  LOOP_ACTION | for VAR in range ( INPUT_RANGE , INPUT_RANGE ) :  LOOP_ACTION | for VAR in range ( INPUT_RANGE , INPUT_RANGE , INPUT_RANGE ) :  LOOP_ACTION | for VAR in ITERABLE : COMMENT LOOP_ACTION | for VAR in range ( INPUT_RANGE ) : COMMENT  LOOP_ACTION | for VAR in range ( INPUT_RANGE , INPUT_RANGE ) : COMMENT  LOOP_ACTION | for VAR in range ( INPUT_RANGE , INPUT_RANGE , INPUT_RANGE ) : COMMENT LOOP_ACTION | for VAR in ITERABLE : LOOP_ACTION COMMENT | for VAR in range ( INPUT_RANGE ) :  LOOP_ACTION COMMENT | for VAR in range ( INPUT_RANGE , INPUT_RANGE ) :  LOOP_ACTION COMMENT | for VAR in range ( INPUT_RANGE , INPUT_RANGE , INPUT_RANGE ) :  LOOP_ACTION COMMENT
ITERABLE -> LIST | TUPLE | VAR
INPUT_RANGE -> VAR | num | INPUT_RANGE OPS INPUT_RANGE 

CLASS -> class VAR ( PARAM ) : | class VAR ( ) : | class Var :

DEF -> DEF_HEAD DEF_ACTION | DEF_HEAD
DEF_ACTION -> DEF_ACTION DEF_ACTION | ACTION | RETURN
DEF_HEAD -> def VAR ( PARAM ) : | def VAR ( ) :
RETURN -> return V
PARAM -> PARAM , PARAM | VAR

METHOD -> VAR . METHOD | FUNCTION 
FUNCTION -> VAR BRACKETS

WITH -> with WITH_TYPE as VAR :
WITH_TYPE -> METHOD | FUNCTION

IMPORT -> from IMPORT_CONT import MODULE | import MODULE | import MULT_MODULE | from IMPORT_CONT import MODULE as VAR
MULT_MODULE -> MULT_MODULE , MULT_MODULE | IMPORT_CONT as VAR 
MODULE -> * | VAR | MULT_MODULE | MODULE , MODULE
IMPORT_CONT ->  IMPORT_CONT . IMPORT_CONT | VAR

DICT -> { DICT_CONT } | { }
DICT_CONT -> DICT_CONT , DICT_CONT | DICT_TYPE 
DICT_TYPE -> DICT_KEY : VAL
DICT_KEY -> STRING | num

INPUT -> input BRACKETS | TYPE ( INPUT )
TYPE -> str | int | float | double

RAISE -> raise FUNCTION
PRINT -> print BRACKETS
BRACKETS -> ( V ) | ( )
COMMENT -> # STRING | " " " STRING " " " | ' ' ' STRING ' ' '
VAR -> variable | 
BRACKETS_BOOL -> ( V eq V ) | ( V ) | ( True ) | ( False )

V -> VAL | VAR | V OPS V | V COMPARE V | V , V | INPUT | STRING

COMPARE -> eq | neq | < | > | le | ge
VAL -> STRING | num |  BOOL | TUPLE | None | LIST | DICT | FUNCTION | METHOD
TUPLE -> ( container )
LIST -> [ container ]
container -> V | V , V
OPS -> + | - | * | / | % | pow | div
STRING -> ' STRING ' | " STRING " | " " | STRING + STRING | string | STRING STRING
BOOL -> True | False | V is V | V COMPARE V | V and V | V or V | not V 
PASS -> pass
