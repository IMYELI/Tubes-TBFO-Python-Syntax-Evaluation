S -> ACTION
ACTION -> ACTION ACTION | VAR = V | VAR = DICT  | VAR = TUPLE | VAR + = V | VAR - = V | VAR * = V | VAR / = V | VAR % = V | DEF | WHILE_LOOP | FOR_LOOP | RAISE | COMMENT | PRINT | CLASS | IF_CONDITION | METHOD | FUNCTION | WITH | IMPORT | PASS
LOOP_ACTION -> LOOP_ACTION LOOP_ACTION | ACTION | break | continue | COMMENT
IF_ACTION -> IF_ACTION IF_ACTION | ACTION | COMMENT 

IF_CONDITION -> if BRACKETS : IF_ACTION | if BRACKETS : IF_ACTION ELIF_CONDITION | if V : IF_ACTION | if V : IF_ACTION ELIF_CONDITION
ELIF_CONDITION -> elif BRACKETS : IF_ACTION ELIF_CONDITION | else : IF_ACTION | elif BRACKETS : | elif V : IF_ACTION


WHILE_LOOP -> while ( True ) : LOOP_ACTION |  while ( False ) : LOOP_ACTION | while ( V ) : LOOP_ACTION | while ( V COMPARE V) : LOOP_ACTION | while  True  : LOOP_ACTION |  while  False  : LOOP_ACTION | while  V  : LOOP_ACTION | while  V COMPARE V : LOOP_ACTION
FOR_LOOP -> for VAR in range ( VAL_LOOP ) : ACTION_LOOP | for VAR in ITERABLE : ACTION_LOOP
ITERABLE -> LIST | TUPLE | VAR
VAL_LOOP -> VAL | VAL , VAL | VAL , VAL , VAL
INPUT_RANGE -> VAR | num | INPUT_RANGE OPS INPUT_RANGE 

CLASS -> class VAR BRACK : | class VAR ( PARAM ) : | class VAR :

DEF -> DEF_HEAD DEF_ACTION | DEF_HEAD
DEF_ACTION -> DEF_ACTION DEF_ACTION | ACTION | RETURN
DEF_HEAD -> def VAR ( PARAM ) : | def VAR BRACK :
RETURN -> return V
PARAM -> PARAM , PARAM | VAR

METHOD -> VAR . METHOD | FUNCTION 
FUNCTION -> VAR BRACKETS

WITH -> with WITH_TYPE as VAR :
WITH_TYPE -> METHOD | FUNCTION

IMPORT -> from IMPORT_CONT import MODULE | import MODULE | import MULT_MODULE | from IMPORT_CONT import MODULE as VAR
MULT_MODULE -> MULT_MODULE , MULT_MODULE | IMPORT_CONT as VAR 
MODULE -> * | VAR | MULT_MODULE | MODULE , MODULE
IMPORT_CONT ->  IMPORT_CONT . IMPORT_CONT | VAR

DICT -> { DICT_CONT } | { }
DICT_CONT -> DICT_CONT , DICT_CONT | DICT_TYPE 
DICT_TYPE -> DICT_KEY : VAL
DICT_KEY -> STRING | num

INPUT -> input BRACKETS | TYPE ( INPUT )
TYPE -> str | int | float | double

RAISE -> raise FUNCTION
PRINT -> print BRACKETS | print ( ' ' ) | print ( " " )
BRACKETS -> ( V ) | ( )
COMMENT -> # STRING | " " " STRING " " " | ' ' ' STRING ' ' '
VAR -> variable
BRACKETS_BOOL -> ( V eq V ) | ( V ) | ( True ) | ( False )
BRACK -> ( )

V -> VAL | VAR | V OPS V | V COMPARE V | V , V | INPUT | STRING

COMPARE -> eq | neq | < | > | le | ge
VAL -> STRING | num |  BOOL | TUPLE | None | LIST | DICT | FUNCTION | METHOD | ARRAY

ARRAY -> VAR [ INDEX ] | VAR [ : ] | VAR [ INDEX : ] | VAR [ : INDEX ] | VAR [ INDEX : INDEX ]
INDEX -> num | VAR | STRING

TUPLE -> ( container )
LIST -> [ container ]
container -> V | V , V
OPS -> + | - | * | / | % | pow | div
STRING -> ' string ' | " string " | " " | ' ' | STRING + STRING | string | STRING STRING
BOOL -> True | False | V is V | V COMPARE V | V and V | V or V | not V 
PASS -> pass
