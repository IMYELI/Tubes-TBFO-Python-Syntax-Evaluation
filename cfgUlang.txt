S -> S S | IF | WHILE | FOR | PRINT | VAR = VAL | VAR = ADT
IF -> if ( CONDITION ) : S
WHILE -> while ( CONDITION ) : ACTION_LOOP
CONDITION -> VAL COMPARE VAL
COMPARE -> eq | neq | < | > | le | ge
ACTION_LOOP -> ACTION_LOOP ACTION_LOOP | S | break | continue
ACTION -> VAR = VAL | VAR = LIST
OPERATOR -> + | - | * | /
VAL -> VAR | num | VAR OPERATOR VAR | VAL , VAL
PRINT -> print ( VAL )
VAR -> variable
ADT -> LIST | TUPLE | DICT
LIST -> [ VAL , VAL ]
TUPLE -> ( VAL )