S0 -> ACTION
ACTION -> VAR = VAL | VAR = ITERABLE | VAR = DICT | FOR_LOOP | CLASS | WHILE_LOOP | DEF | DICT | PRINT | COMMENT | INDEXARR = VAL | FUNCTION | INDEXARR = ITERABLE | ACTION ACTION

FOR_LOOP -> for VAR in range ( VAL_LOOP ) : ACTION_LOOP | for VAR in ITERABLE : ACTION_LOOP
ITERABLE -> LIST | TUPLE | VAR | MATRIX 
VAL_LOOP -> VAL | VAL , VAL | VAL , VAL , VAL

WHILE_LOOP -> while BOOL_WHILE : ACTION_LOOP | while ( BOOL_WHILE ) : ACTION_LOOP 
BOOL_WHILE -> True | False | VAL COMPARE VAL | VAR

ACTION_LOOP -> ACTION_LOOP ACTION_LOOP | break | continue | ACTION

DEF -> def VAR ( ) : ACTION | def VAR ( INPUT_DEF ) : ACTION
RETURN -> return VAL | return ITERABLE 
INPUT_DEF -> INPUT_DEF , INPUT_DEF | variable

PRINT -> print ( INPUT_PRINT )
INPUT_PRINT -> INPUT_PRINT , INPUT_PRINT | variable | num | num OPS num | VAL COMPARE VAL

CLASS -> class VAR ( PARAM_CLASS ) : ACTION
PARAM_CLASS -> PARAM_CLASS , PARAM_CLASS | VAR

INDEXARR -> VAR [ num ]

FUNCTION -> VAR ( VAL ) | VAR ( )


MATRIX -> [ ISI_MATRIX ]
ISI_MATRIX -> ISI_MATRIX , ISI_MATRIX | LIST

LIST -> [ ISI_LIST ] 
ISI_LIST -> ISI_LIST , ISI_LIST | VAL

TUPLE -> ( ISI_TUPLE )
ISI_TUPLE -> ISI_TUPLE , ISI_TUPLE | VAL

DICT -> { DICT_CONT } | { }
DICT_CONT -> DICT_CONT , DICT_CONT | DICT_TYPE 
DICT_TYPE -> DICT_KEY : VAL
DICT_KEY -> STRING | num

VAR -> variable
VAL -> num | num OPS num | VAR | STRING | ITERABLE | FUNCTION
OPS -> + | - | * | / | %
COMMENT -> # string | " " " string " " " | ' ' ' string ' ' '
COMPARE -> eq | neq | < | > | le | ge
STRING -> ' STRING ' | " STRING " | STRING STRING | string 