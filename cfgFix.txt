S0 -> ACTION
ACTION -> IMPORT | VAR = VAL | VAR OPS = VAL | VAR = ITERABLE | IF_CONDITION | VAR = DICT | VAR = INPUT | VAR = INDEXARR | FOR_LOOP | ELIF | RETURN | VAR = INDEXARR | continue | CLASS | WHILE_LOOP | DEF | DICT | PRINT | pass | break | COMMENT | INDEXARR = VAL | FUNCTION | INDEXARR = ITERABLE | ACTION ACTION 

FOR_LOOP -> for VAR in range ( VAL_LOOP ) : ACTION_LOOP | for VAR in ITERABLE : ACTION_LOOP | for VAR in range ( NUM ) : ACTION_LOOP | for VAR in range ( FUNCTION ) : ACTION_LOOP 
ITERABLE -> LIST | TUPLE | VAR | MATRIX 
VAL_LOOP -> VAL | VAL , VAL | VAL , VAL , VAL

WHILE_LOOP -> while BOOL_WHILE : ACTION_LOOP | while ( BOOL_WHILE ) : ACTION_LOOP 
BOOL_WHILE -> True | False | VAL COMPARE VAL | VAR | INPUT | NUM | FUNCTION | VAR OPS VAR | VAR OPS NUM | NUM OPS VAR | FUNCTION OPS FUNCTION | FUNCTION OPS NUM | FUNCTION OPS VAR | NUM OPS FUNCTION | VAR OPS FUNCTION

ACTION_LOOP -> ACTION_LOOP ACTION_LOOP | break | continue | ACTION
DEF -> def VAR ( ) : ACTION | def VAR ( INPUT_DEF ) : ACTION
RETURN -> return VAL | return True | return False
INPUT_DEF -> INPUT_DEF , INPUT_DEF | variable

IF_CONDITION -> if ( VAL ) : ACTION | if ( VAL ) : ACTION ELIF | if VAL : ACTION | if VAL : ACTION ELIF 
ELIF -> elif ( VAL ) : ACTION | else : ACTION | elif VAL : ACTION

PRINT -> print ( INPUT_PRINT )
INPUT_PRINT -> INPUT_PRINT , INPUT_PRINT | variable | NUM | NUM OPS NUM | VAL COMPARE VAL | INPUT | STRING | INDEXARR

CLASS -> class VAR ( PARAM_CLASS ) : ACTION | class VAR ( ) : ACTION | class VAR : ACTION
PARAM_CLASS -> PARAM_CLASS , PARAM_CLASS | VAR

INDEXARR -> VAR [ VAL ] | VAR [ VAL : VAL ] | VAR [ VAL ] [ VAL ] | VAR [ VAL : VAL ] [ VAL ] | VAR [ VAL ] [ VAL : VAL ] | VAR [ VAL : VAL ] [ VAL : VAL ]

FUNCTION -> VAR BRACKET_FUNCTION | VAR ( )
BRACKET_FUNCTION -> ( BRACKET_FUNCTION2
BRACKET_FUNCTION2 -> VAL_FUNCTION )
VAL_FUNCTION -> NUM | NUM OPS NUM | VAR | STRING | ITERABLE | FUNCTION | VAL_FUNCTION , VAL_FUNCTION | INDEXARR | INPUT

IMPORT -> from IMPORT_CONT import MODULE | import MODULE | import MULT_MODULE | from IMPORT_CONT import MODULE as VAR
MULT_MODULE -> MULT_MODULE , MULT_MODULE | IMPORT_CONT as VAR 
MODULE -> * | VAR | MULT_MODULE | MODULE , MODULE
IMPORT_CONT ->  IMPORT_CONT . IMPORT_CONT | VAR

MATRIX -> [ ISI_MATRIX ]
ISI_MATRIX -> ISI_MATRIX , ISI_MATRIX | LIST

LIST -> [ ISI_LIST ] | [ ONE_LINE_LIST ]
ISI_LIST -> ISI_LIST , ISI_LIST | NUM | VAR | STRING
ONE_LINE_LIST -> VAR for VAR in range ( VAL_LOOP ) | VAL for VAR in range ( VAL_LOOP ) | VAR for VAR in range VAL_LOOP | VAL for VAR in range VAL_LOOP

TUPLE -> ( ISI_TUPLE )
ISI_TUPLE -> ISI_TUPLE , ISI_TUPLE | NUM | STRING | VAR

DICT -> { DICT_CONT } | { }
DICT_CONT -> DICT_CONT , DICT_CONT | DICT_TYPE 
DICT_TYPE -> DICT_KEY : NUM | DICT_KEY : STRING
DICT_KEY -> STRING | NUM

INPUT -> input ( INPUT_VAL ) | TYPE ( INPUT ) | input ( )
INPUT_VAL -> STRING | VAL | VAL + VAL
TYPE -> str | int | float | double
RAISE -> raise FUNCTION

NUM -> num | - num


VAR -> variable
VAL -> NUM | NUM OPS NUM | VAR | STRING | ITERABLE | FUNCTION | INDEXARR | BOOL_OPS | INPUT | VAR OPS VAR | VAR OPS NUM | NUM OPS VAR | INDEXARR OPS INDEXARR | BOOL_OPS | VAR OPS INDEXARR | INDEXARR OPS VAR | NUM OPS INDEXARR | INDEXARR OPS NUM
BOOL_OPS -> is | True | False | VAL COMPARE VAL | VAL and VAL | VAL or VAL | VAL is VAL
OPS -> + | - | * | / | %
COMMENT -> # STRING | " " " STRING " " " | ' ' ' STRING ' ' '
COMPARE -> eq | neq | < | > | le | ge
STRING -> ' STRING ' | " STRING " | STRING STRING | stringggg | VAR